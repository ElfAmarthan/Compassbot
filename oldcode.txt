import smtplib
import nest_asyncio
import asyncio
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, CallbackContext, CallbackQueryHandler
import calendar
from datetime import date
from datetime import datetime
import re  # For email validation
import sqlite3
import os



# Conversation states
NAME, EMAIL, LOCATION, DESTINATION, DATE, TIME = range(6)

# Replace with your credentials
TELEGRAM_API_TOKEN = '7857906048:AAF7Mb6uSVHNadayyU0X_8so1fHz3kwUSqM'
SENDER_EMAIL = 'companytnn90@gmail.com'
SENDER_PASSWORD = 'ncka udhb qryw jwnm'  # Update this securely
DEFAULT_RECIPIENT_EMAIL = 'companytnn90@gmail.com'

# Pickup locations for the user to choose from
pickup_locations = ["Airport", "Hotel", "City Center", "Train Station", "Bus Station"]

# SQLite Database setup
def create_db():
    db_path = os.path.join(os.path.dirname(__file__), "booking.db")
    conn = sqlite3.connect(db_path)
    c = conn.cursor()

    # Create a table for storing booking data
    c.execute('''CREATE TABLE IF NOT EXISTS bookings (
                    booking_id INTEGER PRIMARY KEY,
                    user_id INTEGER,
                    email TEXT,
                    name TEXT,  
                    location TEXT,
                    destination TEXT,
                    date TEXT,
                    time TEXT)''')

    conn.commit()
    conn.close()

create_db()  # Initialize the database

# Function to send the booking details via email
def send_booking_email(booking_details, recipient_emails):
    msg = MIMEMultipart()
    msg['From'] = SENDER_EMAIL
    msg['Subject'] = 'New Booking Received'
    
    # Create the HTML body for the email
    html_body = f"""
    <html>
    <body style="font-family: Arial, sans-serif; color: #333; background-color: #f4f4f9; padding: 20px;">
        <h2 style="color: #4CAF50; text-align: center;">New Transportation Booking</h2>
        <table style="width: 100%; max-width: 600px; margin: 0 auto; border-collapse: collapse; background-color: #ffffff; padding: 15px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);">
            <tr>
                <td style="padding: 8px; font-size: 16px; border-bottom: 1px solid #ddd;">
                    <strong>Name:</strong> {booking_details['name']}
                </td>
            </tr>
            <tr>
                <td style="padding: 8px; font-size: 16px; border-bottom: 1px solid #ddd;">
                    <strong>Email:</strong> {booking_details['email']}
                </td>
            </tr>
            <tr>
                <td style="padding: 8px; font-size: 16px; border-bottom: 1px solid #ddd;">
                    <strong>Pickup Location:</strong> {booking_details['location']}
                </td>
            </tr>
            <tr>
                <td style="padding: 8px; font-size: 16px; border-bottom: 1px solid #ddd;">
                    <strong>Destination:</strong> {booking_details['destination']}
                </td>
            </tr>
            <tr>
                <td style="padding: 8px; font-size: 16px; border-bottom: 1px solid #ddd;">
                    <strong>Date:</strong> {booking_details['date']}
                </td>
            </tr>
            <tr>
                <td style="padding: 8px; font-size: 16px; border-bottom: 1px solid #ddd;">
                    <strong>Time:</strong> {booking_details['time']}
                </td>
            </tr>
        </table>

        <hr style="margin: 20px 0; border: 1px solid #e0e0e0;">

        <p style="font-size: 12px; text-align: center; color: #888;">
            This email was automatically generated from the Compass Georgia booking system.
        </p>
    </body>
    </html>
    """
    
    # Attach the HTML body to the message
    msg.attach(MIMEText(html_body, 'html'))
    
    try:
        # Setup the SMTP server
        server = smtplib.SMTP_SSL('smtp.gmail.com', 465)
        server.login(SENDER_EMAIL, SENDER_PASSWORD)
        
        # Join all recipient emails with commas, so it's a single string
        msg['To'] = ", ".join(recipient_emails)  # Ensure it's a string, not a tuple
        
        # Send the email
        text = msg.as_string()
        server.sendmail(SENDER_EMAIL, recipient_emails, text)
        server.quit()
        print('Booking email sent successfully to all recipients!')
    except Exception as e:
        print(f'Error sending email: {e}')

# Function to store the user's booking details in the SQLite database
def store_booking_in_db(user_id, booking_details):
    conn = sqlite3.connect('booking.db')
    c = conn.cursor()

    # Insert the booking details into the database
    c.execute('''INSERT INTO bookings (user_id, name, email, location, destination, date, time)
                 VALUES (?, ?, ?, ?, ?, ?, ?)''', (
        user_id,
        booking_details.get('name'),  
        booking_details.get('email'),
        booking_details.get('location'),
        booking_details.get('destination'),
        booking_details.get('date'),
        booking_details.get('time')
    ))

    conn.commit()
    conn.close()

# Function to retrieve the user's last booking from the SQLite database
def get_last_booking_from_db(user_id):
    # Connect to your database
    conn = sqlite3.connect('booking.db')
    c = conn.cursor()
    
    # Fetch the last booking for the user, order by rowid or timestamp
    c.execute('''SELECT * FROM bookings WHERE user_id = ? ORDER BY rowid DESC LIMIT 1''', (user_id,))
    
    # Fetch the result
    booking = c.fetchone()
    
    if booking:
        # Assuming booking details are in this order: user_id, name, email, location, destination, date, time
        return {
            'Booking ID': booking[0],
            'User ID': booking[1],
            'name': booking[3],
            'email': booking[2],
            'location': booking[4],
            'destination': booking[5],
            'date': booking[6],
            'time': booking[7]
        }
    else:
        return None

    # Check how many columns are returned
    print(f"[DEBUG] Booking returned: {booking}")

    # Adjust the keys according to your table's column order
    keys = ['name', 'email', 'location', 'destination', 'date', 'time']
    booking_dict = dict(zip(keys, booking))
    return booking_dict
# Show the user's last booking
async def show_last_booking(update: Update, context: CallbackContext):
    # Ensure that we are dealing with a message update
    if not update.message:
        print("[DEBUG] No message found in the update.")
        return

    user_id = update.effective_user.id
    last_booking = get_last_booking_from_db(user_id)

    if not last_booking:
        await update.message.reply_text("‚ö†Ô∏è No booking found.")
        return

    message = (
        f"üìù *Last Booking Details:*\n"
        f"üë§ Name: {last_booking.get('name', 'N/A')}\n"
        f"üìß Email: {last_booking.get('email', 'N/A')}\n"
        f"üìç From: {last_booking.get('location', 'N/A')}\n"
        f"üéØ To: {last_booking.get('destination', 'N/A')}\n"
        f"üìÖ Date: {last_booking.get('date', 'N/A')}\n"
        f"‚è∞ Time: {last_booking.get('time', 'N/A')}"
    )
    await update.message.reply_text(message, parse_mode='Markdown')


# Handle the 'Last Booking' button press
async def handle_last_booking(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    await show_last_booking(update, context)
# Handle cancel booking request
# Handle cancel booking request
async def cancel_booking(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()  # Acknowledge the button press

    # Reset the conversation data
    context.user_data.clear()  # This clears all data stored in context.user_data

    # Inform the user that their booking has been canceled
    await query.edit_message_text("Your booking has been canceled. You can start over anytimeüòä")

    # Send the user back to the starting page
    keyboard = [
        [InlineKeyboardButton("Start Booking", callback_data='start_booking')],
        [InlineKeyboardButton("Last Booking", callback_data='last_booking')]  # Option to check the last booking
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Send the message with the start options again
    await query.message.reply_text(
        "Welcome to Compass Georgia! To start booking, click below. You can also check your last booking.",
        reply_markup=reply_markup
    )
    
    return ConversationHandler.END  # End the current conversation


# Start command to introduce the bot
async def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("Start Booking", callback_data='start_booking')],
        [InlineKeyboardButton("Last Booking", callback_data='last_booking')]  # Button for last booking
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "Welcome to Compass Georgia! To continue booking, please click the button below to begin. You can also check your last booking.",
        reply_markup=reply_markup
    )

# Main booking flow
async def book(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()  # Acknowledge the button press

    await query.edit_message_text("Please provide your name:")
    return NAME


# Collect the name from the user
async def collect_name(update: Update, context: CallbackContext):
    user_name = update.message.text
    context.user_data['name'] = user_name  # Save the name to user_data
    
    # Ask for confirmation
    confirmation_keyboard = [
        [InlineKeyboardButton("‚úÖ Confirm", callback_data="confirm_name")],
        [InlineKeyboardButton("‚úè Edit", callback_data="edit_name")],
        [InlineKeyboardButton("‚ùå Cancel Booking", callback_data="cancel_booking")]
    ]
    reply_markup = InlineKeyboardMarkup(confirmation_keyboard)
    
    await update.message.reply_text(f"Your name is: {user_name}. Is this correct?", reply_markup=reply_markup)
    return NAME


# Handle confirmation of the name selection
async def confirm_name(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()  # Acknowledge the button press

    # Proceed to the next step (email collection)
    await query.edit_message_text("Great! Now, please provide your email address:")
    return EMAIL


# Handle editing of the name
async def edit_name(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()  # Acknowledge the button press

    # Ask the user to enter the name again
    await query.edit_message_text("Please provide your name:")
    return NAME


# Validate email format
def is_valid_email(email):
    email_regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    return re.match(email_regex, email)


# Collect the email address
async def collect_email(update: Update, context: CallbackContext):
    email = update.message.text
    if not is_valid_email(email):
        await update.message.reply_text("Invalid email address. Please provide a valid email address:")
        return EMAIL
    context.user_data['email'] = email  # Save the email to user_data
    
    # Ask for confirmation
    confirmation_keyboard = [
        [InlineKeyboardButton("‚úÖ Confirm", callback_data="confirm_email")],
        [InlineKeyboardButton("‚úè Edit", callback_data="edit_email")],
        [InlineKeyboardButton("‚ùå Cancel Booking", callback_data="cancel_booking")]
    ]
    reply_markup = InlineKeyboardMarkup(confirmation_keyboard)
    
    await update.message.reply_text(f"Your email is: {email}. Is this correct?", reply_markup=reply_markup)
    return EMAIL


# Handle confirmation of the email selection
async def confirm_email(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()  # Acknowledge the button press

    # Proceed to the next step (location selection)
    await query.edit_message_text("Got it! Now, please choose your pickup location:", reply_markup=location_buttons())
    return LOCATION


# Handle editing of the email
async def edit_email(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()  # Acknowledge the button press

    # Ask the user to enter the email again
    await query.edit_message_text("Please provide your email address:")
    return EMAIL


# Location buttons function
def location_buttons():
    keyboard = [
        [InlineKeyboardButton("üõ´ **Tbilisi Airport**", callback_data="Airport")],
        [InlineKeyboardButton("üõ´ **Kutaisi Airport**", callback_data="Hotel")],
        [InlineKeyboardButton("üåÜ **City Center**", callback_data="City Center")],
        [InlineKeyboardButton("üöÇ **Train Station**", callback_data="Train Station")],
        [InlineKeyboardButton("üöå **Bus Station**", callback_data="Bus Station")]
    ]
    return InlineKeyboardMarkup(keyboard)


# Handle location selection
async def select_location(update: Update, context: CallbackContext):
    query = update.callback_query
    selected_location = query.data
    context.user_data['location'] = selected_location  # Save the selected location
    await query.answer()  # Acknowledge the button press

    # Ask for destination
    await query.edit_message_text(f"Selected Pickup Location: {selected_location}\nNow, please type your destination:")
    return DESTINATION


# Collect the destination from the user
async def collect_destination(update: Update, context: CallbackContext):
    user_destination = update.message.text
    context.user_data['destination'] = user_destination  # Save the destination
    
    # Ask for confirmation
    confirmation_keyboard = [
        [InlineKeyboardButton("‚úÖ Confirm", callback_data="confirm_destination")],
        [InlineKeyboardButton("‚úè Edit", callback_data="edit_destination")],
        [InlineKeyboardButton("‚ùå Cancel Booking", callback_data="cancel_booking")]
    ]
    reply_markup = InlineKeyboardMarkup(confirmation_keyboard)
    
    await update.message.reply_text(f"Your destination is: {user_destination}. Is this correct?", reply_markup=reply_markup)
    return DESTINATION


# Handle confirmation of the destination selection
async def confirm_destination(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()  # Acknowledge the button press

    # Proceed to the next step (date selection)
    await query.edit_message_text(f"Great! Now, please choose your pickup date.")
    await show_calendar(update, context)
    return DATE


# Handle editing of the destination
async def edit_destination(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()  # Acknowledge the button press

    # Ask the user to enter the destination again
    await query.edit_message_text("Please type your destination:")
    return DESTINATION


# Calendar and date selection
async def show_calendar(update: Update, context: CallbackContext):
    if update.callback_query:
        query = update.callback_query
    else:
        query = None

    today = date.today()

    if 'year' not in context.user_data or 'month' not in context.user_data:
        context.user_data['year'] = today.year
        context.user_data['month'] = today.month

    month = context.user_data['month']
    year = context.user_data['year']
    month_name = calendar.month_name[month]
    cal = calendar.monthcalendar(year, month)

    keyboard = []
    for week in cal:
        row = []
        for day in week:
            if day != 0:
                row.append(InlineKeyboardButton(str(day), callback_data=f"day_{day}"))
        keyboard.append(row)

    # Navigation buttons for previous and next month
    navigation = [
        [InlineKeyboardButton("‚¨ÖÔ∏è Previous Month", callback_data="prev_month"),
         InlineKeyboardButton("Next Month ‚û°Ô∏è", callback_data="next_month")]
    ]
    keyboard.extend(navigation)

    reply_markup = InlineKeyboardMarkup(keyboard)

    if query:
        await query.edit_message_text(f"Please select a date for {month_name} {year}:", reply_markup=reply_markup)
    else:
        await update.message.reply_text(f"Please select a date for {month_name} {year}:", reply_markup=reply_markup)


# Handle the selection of a month (previous/next)
async def change_month(update: Update, context: CallbackContext):
    query = update.callback_query
    action = query.data

    # Get current month and year from context
    month = context.user_data['month']
    year = context.user_data['year']

    # Change the month based on the action (next or previous month)
    if action == "prev_month":
        if month == 1:  # January
            context.user_data['month'] = 12  # Go to December of the previous year
            context.user_data['year'] = year - 1
        else:
            context.user_data['month'] = month - 1
    elif action == "next_month":
        if month == 12:  # December
            context.user_data['month'] = 1  # Go to January of the next year
            context.user_data['year'] = year + 1
        else:
            context.user_data['month'] = month + 1

    # Refresh the calendar with updated month and year
    await show_calendar(update, context)


# Handle the selection of a date
async def select_date(update: Update, context: CallbackContext):
    query = update.callback_query
    selected_day = query.data.split("_")[1]
    selected_date = f"{context.user_data['year']}-{context.user_data['month']:02d}-{int(selected_day):02d}"
    context.user_data['date'] = selected_date  # Save the selected date
    
    await query.answer()  # Acknowledge the button press

    # Ask for time
    await query.edit_message_text(f"Selected date: {selected_date}\nNow, please type your preferred time:")
    return TIME

# Collect the time from the user
async def collect_time(update: Update, context: CallbackContext):
    user_time = update.message.text.strip()

    # Try to parse the time
    try:
        valid_time = datetime.strptime(user_time, "%H:%M").time()  # 24-hour format
        context.user_data['time'] = user_time  # Save the valid time as a string

        # Ask for confirmation
        confirmation_keyboard = [
            [InlineKeyboardButton("‚úÖ Confirm", callback_data="confirm_time")],
            [InlineKeyboardButton("‚úè Edit", callback_data="edit_time")],
            [InlineKeyboardButton("‚ùå Cancel Booking", callback_data="cancel_booking")]
        ]
        reply_markup = InlineKeyboardMarkup(confirmation_keyboard)
        
        await update.message.reply_text(
            f"Your time is: {user_time}. Is this correct?",
            reply_markup=reply_markup
        )
        return TIME

    except ValueError:
        await update.message.reply_text(
            "‚ùå Invalid time format. Please enter the time in 24-hour format (e.g., 14:30)."
        )
        return TIME  # Ask again
    
# Handle confirmation of the time selection
async def confirm_time(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()  # Acknowledge the button press

    # Finalize the booking
    await finalize_booking(update, context)
    return ConversationHandler.END


# Handle editing of the time
async def edit_time(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()  # Acknowledge the button press

    # Ask the user to enter the time again
    await query.edit_message_text("Please type your preferred time:")
    return TIME


# Finalize the booking and send email
async def finalize_booking(update: Update, context: CallbackContext):
    booking_details = {
        "name": context.user_data.get('name'),
        "email": context.user_data.get('email'),
        "location": context.user_data.get('location'),
        "destination": context.user_data.get('destination'),
        "date": context.user_data.get('date'),
        "time": context.user_data.get('time')
    }

    # Check if update.message exists or fallback to callback_query
    if update.message:
        user_id = update.message.from_user.id  # Get the user_id from the message
    elif update.callback_query:
        user_id = update.callback_query.from_user.id  # Get the user_id from the callback query
    else:
        user_id = None  # Handle the case where both are None (although this should not happen)

    # If user_id is None, it might be an error, so handle this case
    if user_id is None:
        print("Error: No user_id found in the update.")
        return ConversationHandler.END

    # Store the booking data in the SQLite database
    store_booking_in_db(user_id, booking_details)

    # Send the booking email
    recipient_email = context.user_data.get('email')  # Use the email entered by the user
    recipient_emails = [recipient_email, DEFAULT_RECIPIENT_EMAIL]  # List of recipient emails
    send_booking_email((booking_details), recipient_emails)

    # Check if `update.message` exists, and use `effective_message`
    message = update.effective_message if update.effective_message else None

    if message:
        await message.reply_text("Your booking has been confirmed. We have sent the details to your email and our team. Thank you!")

    # End the conversation
    return ConversationHandler.END

# Main function to run the bot
async def main():
    application = Application.builder().token(TELEGRAM_API_TOKEN).build()

    # Conversation handler to handle user flow
    conversation_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start), CallbackQueryHandler(book, pattern='^start_booking$')],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_name)],
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_email)],
            LOCATION: [CallbackQueryHandler(select_location)],
            DESTINATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_destination)],
            DATE: [CallbackQueryHandler(select_date)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_time)],
        },
        fallbacks=[
            CallbackQueryHandler(confirm_name, pattern='^confirm_name$'),
            CallbackQueryHandler(edit_name, pattern='^edit_name$'),
            CallbackQueryHandler(confirm_email, pattern='^confirm_email$'),
            CallbackQueryHandler(edit_email, pattern='^edit_email$'),
            CallbackQueryHandler(confirm_destination, pattern='^confirm_destination$'),
            CallbackQueryHandler(edit_destination, pattern='^edit_destination$'),
            CallbackQueryHandler(confirm_time, pattern='^confirm_time$'),
            CallbackQueryHandler(edit_time, pattern='^edit_time$'),
            CallbackQueryHandler(cancel_booking, pattern='^cancel_booking$')

        ]
    )

    application.add_handler(CallbackQueryHandler(change_month, pattern='^(prev_month|next_month)$'))
    application.add_handler(CallbackQueryHandler(show_last_booking, pattern='^last_booking$'))
    application.add_handler(CommandHandler('last_booking', show_last_booking))
    application.add_handler(conversation_handler)

    # Start the bot
    await application.run_polling()

if __name__ == '__main__':
    # Check if the event loop is already running
    try:
        # If we are already in a running event loop (common in Jupyter or some IDEs), use await directly

        nest_asyncio.apply()  # This allows nested event loops (e.g., in Jupyter)
        asyncio.get_event_loop().run_until_complete(main())  # Run the main function directly
    except RuntimeError as e:
        if "This event loop is already running" in str(e):
            print("Event loop is already running. Skipping asyncio.run()")
        else:
            raise e
